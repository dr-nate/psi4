    -----------------------------------------------------------------------
          Psi4: An Open-Source Ab Initio Electronic Structure Package
                              Psi4 0.4.898 Driver

                          Git: Rev {CMakeRewrite-KillTheBoost} 6f808ac dirty

    J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,
    F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,
    M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,
    W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,
    and T. D. Crawford, WIREs Comput. Mol. Sci. 2, 556-565 (2012)
    (doi: 10.1002/wcms.93)

                         Additional Contributions by
    A. E. DePrince, U. Bozkaya, A. Yu. Sokolov, D. G. A. Smith, R. Di Remigio,
    R. M. Richard, J. F. Gonthier, H. R. McAlexander, M. Saitow, and
    B. P. Pritchard
    -----------------------------------------------------------------------


    Psi4 started on: Fri Sep  9 15:13:59 2016

    Process ID:  22642
    PSI4DATADIR: stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4jturney/install-psi4/share/psi4/
    Memory level set to 256.000 MB

  ==> Input File <==

--------------------------------------------------------------------------

var = 'E_CONVERGENCE'
descrip = 'global conv double kw '

set E_CONVERGENCE 5.5e-4
compare_values(get_option('SCF', var), 0.000550, 6, descrip + 'set as sci float')
set E_CONVERGENCE .00055
compare_values(get_option('SCF', var), 0.000550, 6, descrip + 'set as float')
set E_CONVERGENCE 0.00055
compare_values(get_option('SCF', var), 0.000550, 6, descrip + 'set as float')
set E_CONVERGENCE 5e-4
compare_values(get_option('SCF', var), 0.000500, 6, descrip + 'set as sci int')
set E_CONVERGENCE 4
compare_values(get_option('SCF', var), 0.000100, 6, descrip + 'set as exponent int')
set E_CONVERGENCE 1
compare_values(get_option('SCF', var), 0.100000, 6, descrip + 'set as exponent int')
set E_CONVERGENCE 0
compare_values(get_option('SCF', var), 1.000000, 6, descrip + 'set as zero int')
set E_CONVERGENCE 0.0
compare_values(get_option('SCF', var), 0.000000, 6, descrip + 'set as zero float')


var = 'CHOLESKY_TOLERANCE'
descrip = 'local conv double kw '

set scf CHOLESKY_TOLERANCE 5.5e-4
compare_values(get_option('SCF', var), 0.000550, 6, descrip + 'set as sci float')
set scf CHOLESKY_TOLERANCE .00055
compare_values(get_option('SCF', var), 0.000550, 6, descrip + 'set as float')
set scf CHOLESKY_TOLERANCE 0.00055
compare_values(get_option('SCF', var), 0.000550, 6, descrip + 'set as float')
set scf CHOLESKY_TOLERANCE 5e-4
compare_values(get_option('SCF', var), 0.000500, 6, descrip + 'set as sci int')
set scf CHOLESKY_TOLERANCE 4
compare_values(get_option('SCF', var), 0.000100, 6, descrip + 'set as exponent int')
set scf CHOLESKY_TOLERANCE 1
compare_values(get_option('SCF', var), 0.100000, 6, descrip + 'set as exponent int')
set scf CHOLESKY_TOLERANCE 0
compare_values(get_option('SCF', var), 1.000000, 6, descrip + 'set as zero int')
set scf CHOLESKY_TOLERANCE 0.0
compare_values(get_option('SCF', var), 0.000000, 6, descrip + 'set as zero float')


var = 'SCF_MEM_SAFETY_FACTOR'
descrip = 'global double kw '

set SCF_MEM_SAFETY_FACTOR 5.5e-4
compare_values(get_option('SCF', var), 0.000550, 6, descrip + 'set as sci float')
set SCF_MEM_SAFETY_FACTOR .00055
compare_values(get_option('SCF', var), 0.000550, 6, descrip + 'set as float')
set SCF_MEM_SAFETY_FACTOR 0.00055
compare_values(get_option('SCF', var), 0.000550, 6, descrip + 'set as float')
set SCF_MEM_SAFETY_FACTOR 5e-4
compare_values(get_option('SCF', var), 0.000500, 6, descrip + 'set as sci int')
set SCF_MEM_SAFETY_FACTOR 4
compare_values(get_option('SCF', var), 4.000000, 6, descrip + 'set as int')
set SCF_MEM_SAFETY_FACTOR 0
compare_values(get_option('SCF', var), 0.000000, 6, descrip + 'set as zero int')
set SCF_MEM_SAFETY_FACTOR 0.0
compare_values(get_option('SCF', var), 0.000000, 6, descrip + 'set as zero float')


var = 'DIIS_MAX_VECS'
descrip = 'global int kw '

set DIIS_MAX_VECS 4
compare_integers(get_option('SCF', var), 4, descrip + 'set as pos float')
set DIIS_MAX_VECS 0
compare_integers(get_option('SCF', var), 0, descrip + 'set as zero float')
set DIIS_MAX_VECS -2
compare_integers(get_option('SCF', var), -2, descrip + 'set as neg float')
set DIIS_MAX_VECS 4.0
compare_integers(get_option('SCF', var), 4, descrip + 'set as pos int')
set DIIS_MAX_VECS 0.0
compare_integers(get_option('SCF', var), 0, descrip + 'set as zero int')
set DIIS_MAX_VECS -2.0
compare_integers(get_option('SCF', var), -2, descrip + 'set as neg int')


var = 'GUESS'
descrip = 'global string kw '

set GUESS AUTO
compare_strings('AUTO', get_option('SCF', var), descrip + 'set as def str')
set guess gwh
compare_strings('GWH', get_option('SCF', var), descrip + 'set as nondef str')

var = 'SOSCF'
descrip = 'global bool kw '

set soscf true
compare_integers(1, get_option('SCF', var), descrip + 'set as true')
set soscf True
compare_integers(1, get_option('SCF', var), descrip + 'set as True')
set soscf 1
compare_integers(1, get_option('SCF', var), descrip + 'set as 1')
set soscf yes
compare_integers(1, get_option('SCF', var), descrip + 'set as yes')
set soscf ON
compare_integers(1, get_option('SCF', var), descrip + 'set as ON')
set soscf false
compare_integers(0, get_option('SCF', var), descrip + 'set as false')
set soscf False
compare_integers(0, get_option('SCF', var), descrip + 'set as False')
set soscf 0
compare_integers(0, get_option('SCF', var), descrip + 'set as 0')
set soscf NO
compare_integers(0, get_option('SCF', var), descrip + 'set as NO')
set soscf off
compare_integers(0, get_option('SCF', var), descrip + 'set as off')


var = 'MOM_OCC'
descrip = 'global array kw '

set mom_occ [[1, 2.0, 'cat', dog, 5e-2], [1, 2, 7, 8]]
asdf = get_option('SCF', var)
compare_integers(1, asdf[0][0], descrip + 'int element')
compare_values(2.0, asdf[0][1], 6, descrip + 'float element')
compare_strings('CAT', asdf[0][2], descrip + 'string element')
compare_strings('DOG', asdf[0][3], descrip + 'unquoted string element')
compare_values(0.05, asdf[0][4], 6, descrip + 'sci float element')
print asdf, type(asdf), [type(v) for v in asdf[0]]

# Boost:  [[1L, 2.0, u'CAT', u'DOG', 0.05], [1L, 2L, 7L, 8L]] <type 'list'> [<type 'long'>, <type 'float'>, <type 'unicode'>, <type 'unicode'>, <type 'float'>]
# Pybind: [[1, 2.0, 'CAT', 'DOG', 0.05], [1, 2, 7, 8]]        <type 'list'> [<type 'int'>,  <type 'float'>, <type 'str'>,     <type 'str'>,     <type 'float'>]



--------------------------------------------------------------------------
	global conv double kw set as sci float............................PASSED
	global conv double kw set as float................................PASSED
	global conv double kw set as float................................PASSED
	global conv double kw set as sci int..............................PASSED
	global conv double kw set as exponent int.........................PASSED
	global conv double kw set as exponent int.........................PASSED
	global conv double kw set as zero int.............................PASSED
	global conv double kw set as zero float...........................PASSED
	local conv double kw set as sci float.............................PASSED
	local conv double kw set as float.................................PASSED
	local conv double kw set as float.................................PASSED
	local conv double kw set as sci int...............................PASSED
	local conv double kw set as exponent int..........................PASSED
	local conv double kw set as exponent int..........................PASSED
	local conv double kw set as zero int..............................PASSED
	local conv double kw set as zero float............................PASSED
	global double kw set as sci float.................................PASSED
	global double kw set as float.....................................PASSED
	global double kw set as float.....................................PASSED
	global double kw set as sci int...................................PASSED
	global double kw set as int.......................................PASSED
	global double kw set as zero int..................................PASSED
	global double kw set as zero float................................PASSED
	global int kw set as pos float....................................PASSED
	global int kw set as zero float...................................PASSED
	global int kw set as neg float....................................PASSED
	global int kw set as pos int......................................PASSED
	global int kw set as zero int.....................................PASSED
	global int kw set as neg int......................................PASSED
	global string kw set as def str...................................PASSED
	global string kw set as nondef str................................PASSED
	global bool kw set as true........................................PASSED
	global bool kw set as True........................................PASSED
	global bool kw set as 1...........................................PASSED
	global bool kw set as yes.........................................PASSED
	global bool kw set as ON..........................................PASSED
	global bool kw set as false.......................................PASSED
	global bool kw set as False.......................................PASSED
	global bool kw set as 0...........................................PASSED
	global bool kw set as NO..........................................PASSED
	global bool kw set as off.........................................PASSED
	global array kw int element.......................................PASSED
	global array kw float element.....................................PASSED
	global array kw string element....................................PASSED
	global array kw unquoted string element...........................PASSED
	global array kw sci float element.................................PASSED

*** Psi4 exiting successfully. Buy a developer a beer!
